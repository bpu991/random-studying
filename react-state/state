- In any sufficiently advanced web app, the user interface has to be stateful
- logged-in users see a different screen than logged out users
- clicked 'edit-profile' opens up a modal window
- sections of a website can expand or collapse
- State is designed to change in response to events
- What does state track?
    - UI Logic: changing the state of the interface
    - Business logic: the changing state of data (ie. messages that are read/unread)
    - Before state, people would change state by selecting DOM elements

Core React Concept Review
    - Component
        - building block of React
        - combines logic (js) with presentation (jsx)
    - Prop
        - data passed to a component 
        - immutable; component cannot change its own props
    - State
        - internal data specific to a component

What is React State?
    - State is an instance attribute on a component
    - It's always an object (POJO), since you'll want to keep track of several
      keys/values

Initial State
    - State should be initialized as soon as the component is created
    - Set it in the constructor function
        constructor(props) {
            super(props);
            this.state = {
                /* values to track */
            }
        }

Changing State
    - this.setState() is the built in React method of changing component's state
    - Can call in any instance method except constructor
    - Takes an object describing the state changes
    - Patches state object - keys that you didn't specify dont change
    - Asynchronous

Updating State (scoreboard, number counter, etc)
    - setState Callback Form -> this.setState(callback)
        - instead of passing an object, pass it a callback with the current state
          as a parameter
        - Callback should return an object representing the new state
        - this.setState(currentState => ({ count: curState.count + 1 }));

Minimizing State
    - You want to try to put as little data in state as possible
        - Does x change? if not, x does not need to be part of state
    - State should live on the parent component and that parent component should
      have a bunch of 'dumb' stateless comps that just display the data

React events
    - Mouse events: onClick, onMouseOver
    - Form events: onSubmit
    - keyboard events: onKeyDown, onKeyUp, onKeyPress
    - Inline binding of 'this': 
        onMouseEnter={this.dispenseMessage.bind(this)}
        cons: not good for being efficient
    - Arrow function binding of 'this':
        onMouseEnter={() => this.dispenseMessage()}
    - Bind in the constructor

Method Binding with Arguments
    - Passing an argument through a method can be done like this:
    {this.props.colors.map(c => {
        const colorObj = { backgroundColor: c};
        return <button style={colorObj} onClick={this.changeColor.bind(this, c)}>Click on Me</button>
    })}
    -the changeColor method accepts a new color and that color is passed in as 'c' in the onClick

Passing function to child components
    